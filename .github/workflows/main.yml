name: Tessera Maven Build

on: 
  push:
    branches: 
      - master
  pull_request:
    branches: 
      - master
env: 
  MAVEN_REPO_CACHE_KEY: ${{ github.run_id }}-maven-${{ github.run_number }}-${{ github.run_number }}-${{ github.sha }}
  # TODO: Change variable to your image's name.
  IMAGE_NAME: ptm
  DOCKER_USER: willcao4
  DOCKER_PASSWD: cao819128
  DOCKER_REPO: willcao4/qlcptm
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-java@v1
          with:
              java-version: 11
        - run: |
           mvn install -Dsilent=true -DskipTests=true -Dmaven.javadoc.skip=true -Dchecksyle.skip=true -Dspotbugs.skip=true -Djacoco.skip=true -B
           mvn de.qaware.maven:go-offline-maven-plugin:resolve-dependencies -B
           mvn dependency:go-offline -B
           mvn dependency:resolve-plugins -B
        - uses: actions/cache@v1
          with:
            path: ~/.m2/repository
            key: ${{env.MAVEN_REPO_CACHE_KEY}}
            restore-keys: |
              ${{env.MAVEN_REPO_CACHE_KEY}}
        - uses: homoluctus/slatify@v2.1.2
          if: failure()
          with:
            type: ${{job.status}}
            job_name: Build no checks
            url: ${{ secrets.SLACK_WEBHOOK }}
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{env.MAVEN_REPO_CACHE_KEY}}
          restore-keys: |
            ${{env.MAVEN_REPO_CACHE_KEY}}
      - run: mvn package -pl \!tests/acceptance-test
      - uses: codecov/codecov-action@v1
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          flags: unittests
          fail_ci_if_error: true
      - uses: homoluctus/slatify@v2.1.2
        if: failure()
        with:
          type: ${{job.status}}
          job_name: Unit tests
          url: ${{ secrets.SLACK_WEBHOOK }}

  itest:
      runs-on: ubuntu-latest
      needs: build
      steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-java@v1
          with:
            java-version: 11
        - uses: actions/cache@v1
          with:
            path: ~/.m2/repository
            key: ${{env.MAVEN_REPO_CACHE_KEY}}
            restore-keys: |
              ${{env.MAVEN_REPO_CACHE_KEY}}
        - run: |
           mvn install -Dsilent=true -DskipTests=true -Dmaven.javadoc.skip=true -Dchecksyle.skip=true -Dspotbugs.skip=true -Djacoco.skip=true -B
           mvn verify -pl tests/acceptance-test
        - uses: homoluctus/slatify@v2.1.2
          if: failure()
          with:
            type: ${{job.status}}
            job_name: Integration tests
            url: ${{ secrets.SLACK_WEBHOOK }}

  vaultTests:
      runs-on: ubuntu-latest
      needs: build
      steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-java@v1
          with:
            java-version: 11
        - uses: actions/cache@v1
          with:
            path: ~/.m2/repository
            key: ${{env.MAVEN_REPO_CACHE_KEY}}
            restore-keys: |
             ${{env.MAVEN_REPO_CACHE_KEY}}
        - run: |
            wget https://releases.hashicorp.com/vault/1.2.2/vault_1.2.2_linux_amd64.zip -O /tmp/vault_1.2.2_linux_amd64.zip
            mkdir -p vault/bin && pushd $_
            unzip /tmp/vault_1.2.2_linux_amd64.zip
            export PATH=$PATH:$PWD && popd
            mvn install -Dsilent=true -DskipTests=true -Dmaven.javadoc.skip=true -Dchecksyle.skip=true -Dspotbugs.skip=true -Djacoco.skip=true -B
            mvn verify -pl tests/acceptance-test -P vault-acceptance-tests
        - uses: homoluctus/slatify@v2.1.2
          if: failure()
          with:
            type: ${{job.status}}
            job_name: Vault integration tests
            url: ${{ secrets.SLACK_WEBHOOK }}

  atest:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{env.MAVEN_REPO_CACHE_KEY}}
          restore-keys: |
            ${{env.MAVEN_REPO_CACHE_KEY}}
      - run: |
          mvn install -Dsilent=true -DskipTests=true -Dmaven.javadoc.skip=true -Dchecksyle.skip=true -Dspotbugs.skip=true -Djacoco.skip=true -B
          export TESSERA_VERSION=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout`
          export TESSERA_JAR=~/.m2/repository/com/jpmorgan/quorum/tessera-app/$TESSERA_VERSION/tessera-app-$TESSERA_VERSION-app.jar
          cd
          git clone https://github.com/jpmorganchase/quorum-examples.git
          git clone https://github.com/jpmorganchase/quorum-acceptance-tests.git
          echo "Install geth"
          curl -L https://dl.bintray.com/quorumengineering/quorum/v2.5.0/geth_v2.5.0_linux_amd64.tar.gz -o geth.tar.gz
          tar xvzf geth.tar.gz
          sudo mv geth /usr/local/bin/
          geth version
          echo "Installed geth"
          echo "Install solc"
          curl -L https://github.com/ethereum/solidity/releases/download/v0.5.4/solc-static-linux -o solc
          sudo mv solc /usr/local/bin/
          sudo chmod 755 /usr/local/bin/solc
          solc --version
          echo "Installed solc"
          echo "Install gauge"
          curl -L https://github.com/getgauge/gauge/releases/download/v1.0.7/gauge-1.0.7-linux.x86_64.zip -o gauge.zip
          sudo unzip -o gauge.zip -d /usr/local/bin
          cd quorum-acceptance-tests
          gauge install
          cd
          echo "Installed gauge"
          echo "Start $TESSERA_JAR for 7 nodes"
          cd quorum-examples/examples/7nodes
          ./tessera-init.sh
          ./init.sh istanbul
          ./start.sh istanbul tessera
          cd ../../../
          echo "Started $TESSERA_JAR for 7 nodes"
          echo "Run quorum-acceptance-tests"
          cd quorum-acceptance-tests
          cp config/application-local.7nodes.yml config/application-local.yml
          mvn test
          echo "Complete quorum-acceptance-tests"
        env:
          MAVEN_OPTS: -Xms1024m -Xmx2048m
      - uses: homoluctus/slatify@v2.1.2
        if: failure()
        with:
          type: ${{job.status}}
          job_name: Acceptance tests
          url: ${{ secrets.SLACK_WEBHOOK }}

  slackNotification:
    runs-on: ubuntu-latest
    needs: [build,atest,itest,test,vaultTests]
    steps:
    - uses: homoluctus/slatify@v2.1.2
      if: failure()
      with:
        type: ${{job.status}}
        job_name: Build
        url: ${{ secrets.SLACK_WEBHOOK }}

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: [build,atest,itest,test,vaultTests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: | 
          docker build . --file Dockerfile --tag $IMAGE_NAME
          echo "docker build . --file Dockerfile --tag $IMAGE_NAME"
          docker image ls

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/$DOCKER_REPO/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME docker.pkg.github.com/$DOCKER_REPO:$VERSION
          echo "docker tag $IMAGE_NAME docker.pkg.github.com/$DOCKER_REPO:$VERSION"
          docker image ls
          echo "docker push docker.pkg.github.com/$DOCKER_REPO:$VERSION"
          docker push docker.pkg.github.com/$DOCKER_REPO:$VERSION
