plugins {
    id 'io.swagger.core.v3.swagger-gradle-plugin' version "$swaggerVersion"
}

dependencies {
    compile project(':tessera-jaxrs:common-jaxrs')
    compile project(':config')
    compile project(':shared')
    compile project(':tessera-core')
    compile project(':enclave:enclave-api')

    compile project(":tessera-partyinfo")

    implementation "org.hibernate:hibernate-validator:6.0.2.Final"

    compile 'javax.ws.rs:javax.ws.rs-api'
    compile 'io.swagger.core.v3:swagger-annotations'

    compile 'javax.servlet:javax.servlet-api'
    compile 'org.apache.commons:commons-lang3'
    compile 'javax.persistence:javax.persistence-api'
    compile "javax.activation:javax.activation-api"
    compile "com.sun.mail:javax.mail"
    compile project(':encryption:encryption-api')

    testCompile "org.glassfish.jersey.test-framework:jersey-test-framework-core"
    testRuntimeOnly "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2"
    testRuntimeOnly 'org.glassfish.jersey.media:jersey-media-json-processing'
    testRuntimeOnly 'org.glassfish.jersey.media:jersey-media-moxy'
    testRuntimeOnly "org.glassfish.jersey.inject:jersey-hk2:2.27"
    testImplementation project(':test-utils:mock-jaxrs')

    compile project(':service-locator:service-locator-api')
    runtimeOnly project(':service-locator:service-locator-spring')
    testImplementation project(':test-utils:mock-service-locator')
    testCompile "org.slf4j:jul-to-slf4j:1.7.5"
    testRuntime "org.glassfish.jersey.ext:jersey-bean-validation"

}

def generatedResources = "${project.buildDir}/generated-resources/openapi"

project.logger.lifecycle('sourceSets.main.compileClasspath')
sourceSets.main.compileClasspath.each { project.logger.lifecycle("${it}") }

resolve {
    classpath = sourceSets.main.runtimeClasspath
    outputDir = file(generatedResources)
    outputFileName = 'openapi.q2t'
    outputFormat = 'JSONANDYAML'
    prettyPrint = 'TRUE'
    openApiFile = file("${project.projectDir}/src/main/resources/openapi-base-q2t.yaml")
    resourcePackages = [
            'com.quorum.tessera.api.common',
            'com.quorum.tessera.p2p',
            'com.quorum.tessera.thirdparty',
            'com.quorum.tessera.q2t'
    ]
    modelConverterClasses = ['com.quorum.tessera.openapi.FullyQualifiedNameResolver']
    filterClass = 'com.quorum.tessera.openapi.Q2TOperationsFilter'
}

sourceSets.main.output.dir(generatedResources)

jar.dependsOn(resolve)

description = 'transaction-jaxrs'
